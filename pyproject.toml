[project]
name = 'stcal'
description = 'STScI tools and algorithms used in calibration pipelines'
readme = 'README.md'
requires-python = '>=3.9'
license = { file = 'LICENSE' }
authors = [{ name = 'STScI', email = 'help@stsci.edu' }]
classifiers = [
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Astronomy',
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python :: 3',
]
dependencies = [
    'astropy >=5.0.4',
    'scipy >=1.6.0',
    'numpy >=1.20',
    'opencv-python-headless >=4.6.0.66',
    'asdf >=2.15.0',
    'gwcs >= 0.18.1',
]
dynamic = ['version']

[project.optional-dependencies]
docs = [
    'numpydoc',
    'packaging >=17',
    'sphinx<7.0.0',
    'sphinx-asdf',
    'sphinx-astropy',
    'sphinx-rtd-theme',
    'stsci-rtd-theme',
    'tomli; python_version <="3.11"',
]
test = [
    'psutil',
    'pytest >=4.6.0',
    'pytest-cov',
    'pytest-doctestplus',
]

[project.urls]
'repository' = 'https://github.com/spacetelescope/stcal'
'tracker' = 'https://github.com/spacetelescope/stcal/issues'

[build-system]
requires = [
    'setuptools >=61',
    'setuptools_scm[toml] >=3.4',
    'wheel',
    'Cython >=0.29.21',
    'numpy >=1.18',
]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]
write_to = 'src/stcal/_version.py'

[tool.setuptools]
zip-safe = true

[tool.setuptools.packages.find]
where = ['src']

[tool.pytest.ini_options]
minversion = 4.6
doctest_plus = true
doctest_rst = true
text_file_format = 'rst'
addopts = ''
norecursedirs = [
    'benchmarks',
    '.asv',
    '.eggs',
    '.tox',
    'build',
    'venv',
]
filterwarnings = [
    "error::ResourceWarning",
]

[tool.ruff]
line-length = 110
select = [
    'F',      # Pyflakes
    'W', 'E', # pycodestyle
    'C',
    'I',      # isort
    # 'N',      # pep8-naming
    'UP',     # pyupgrade
    'S',      # flake8-bandit
    # 'BLE',    # flake8-blind-except
    'B',      # flake8-bugbear
    # 'A',       # flake8-builtins (prevent shadowing of builtins)
    # 'C4',      # flake8-comprehensions (best practices for comprehensions)
    # 'T10',     # flake8-debugger (prevent debugger statements in code)
    # 'ISC',     # flake8-implicit-str-concat (prevent implicit string concat)
    # 'ICN',     # flake8-import-conventions (enforce import conventions)
    # 'INP',     # flake8-no-pep420 (prevent use of PEP420, i.e. implicit name spaces)
    'G',       # flake8-logging-format (best practices for logging)
    # 'PIE',     # flake8-pie (misc suggested improvement linting)
    # 'T20',     # flake8-print (prevent print statements in code)
    # 'PT',      # flake8-pytest-style (best practices for pytest)
    # 'Q',       # flake8-quotes (best practices for quotes)
    # 'RSE',     # flake8-raise (best practices for raising exceptions)
    # 'RET',     # flake8-return (best practices for return statements)
    # 'SLF',     # flake8-self (prevent private member access)
    # 'TID',     # flake8-tidy-imports (prevent banned api and best import practices)
    # 'INT',     # flake8-gettext (when to use printf style strings)
    # 'ARG',     # flake8-unused-arguments (prevent unused arguments)
    # 'PTH',     # flake8-use-pathlib (prefer pathlib over os.path)
    # 'ERA',     # eradicate (remove commented out code)
    # 'PGH',     # pygrep (simple grep checks)
    # 'PL',      # pylint (general linting, flake8 alternative)
    'FLY',     # flynt (f-string conversion where possible)
    'NPY',     # NumPy-specific checks (recommendations from NumPy)
    # 'PERF',    # Perflint (performance linting)
    'RUF',     # ruff specific checks
]
ignore = [
    'C901', # variable is too complex
]
exclude = [
    'docs',
    'build',
    'dist',
    '.tox',
    '.eggs',
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*.py" = [
    "S101"
]

[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]

[tool.cibuildwheel.linux]
archs = ["auto", "aarch64"]
